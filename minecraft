#!/bin/bash
# /etc/init.d/minecraft
# version 1.2.0 2012-06-11 (YYYY-MM-DD)

### BEGIN INIT INFO
# Provides:   minecraft
# Required-Start: $local_fs $remote_fs
# Required-Stop:  $local_fs $remote_fs
# Should-Start:   $network
# Should-Stop:    $network
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description:    Minecraft server
# Description:    Init script for minecraft/bukkit server, with rolling logs and use of ramdisk for less lag.
### END INIT INFO

### Based on http://www.minecraftwiki.net/wiki/Server_startup_script
### Forked from https://www.github.com/karrth/minecraft-init


# Name of server.jar file
SERVICE='craftbukkit.jar'
# User that should run the server
USERNAME="minecraft"
# Path to minecraft directory
MCPATH="/home/${USERNAME}/server"
CPU_COUNT=2
MAX_RAM="1536M"
OPTIONS="nogui"
INVOCATION="java -Xmx${MAX_RAM} -Xincgc -XX:+UseConcMarkSweepGC -XX:+CMSIncrementalPacing -XX:ParallelGCThreads=$CPU_COUNT -XX:+AggressiveOpts -jar $SERVICE $OPTIONS"
# Where the world backups should go
BACKUPPATH="/home/${USERNAME}/backups/world"
# Where the logs are copied when running log-roll
LOGPATH="/home/${USERNAME}/backups/logs"
# Where the whole minecraft directory is copied when whole-backup is runned
WHOLEBACKUP="/home/${USERNAME}/backups/server"
# Where the world is located on the disk
WORLDSTORAGE="/home/${USERNAME}/server/diskworld"
#Path to the the mounted ramdisk default in Ubuntu: /dev/shm
RAMDISK="/home/${USERNAME}/ramdisk"


ME=`whoami`
as_user() {
	if [ $ME == $USERNAME ] ; then
		bash -c "$1"
	else
		su - $USERNAME -c "$1"
	fi
}
is_running() {
	# Checks for the minecraft server's screen session
	# returns true if it exists
	#if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
	if pgrep -u $USERNAME -f $SERVICE > /dev/null
	then
		return 0
	fi
	return 1
}
datepath() {
	echo $1`date +%FT%T`$3
}
mc_start() {
	if is_running
	then
		echo "Tried to start but $SERVICE was already running!"
	else
		echo "$SERVICE was not running... starting."
		cd $MCPATH
		as_user "cd $MCPATH && screen -dmS $USERNAME $INVOCATION"

		#sleep 7
		#if is_running
		#then
		#	echo "$SERVICE is now running."
		#else
		#	echo "Could not start $SERVICE."
		#fi

		# Waiting for server to start
		seconds=0
		until is_running
		do
			sleep 1
			seconds=$seconds+1
			# If startup takes longer than 30 seconds, abort
			if [[ $seconds -ge 30 ]]
			then
				echo "$SERVICE failed to start. Aborting."
				exit 1
			fi
			# Show that script is thinking
			echo "..."
		done
		echo "$SERVICE is now running."
	fi
}

mc_saveoff() {
	if is_running
	then
		echo "$SERVICE is running... suspending saves"
		as_user "screen -p 0 -S $USERNAME -X eval 'stuff \"save-off\"\015'"
		as_user "screen -p 0 -S $USERNAME -X eval 'stuff \"save-all\"\015'"
		sync
		sleep 10
	else
		echo "$SERVICE was not running. Not suspending saves."
	fi
}

mc_saveon() {
	if is_running
	then
		echo "$SERVICE is running... re-enabling saves"
		as_user "screen -p 0 -S $USERNAME -X eval 'stuff \"save-on\"\015'"
	else
		echo "$SERVICE was not running. Not resuming saves."
	fi
}

mc_stop() {
	if is_running
	then
		echo "$SERVICE is running... stopping."
		echo "Saving worlds..."
		as_user "screen -p 0 -S $USERNAME -X eval 'stuff \"save-all\"\015'"
		sleep 10
		echo "Stopping server..."
		as_user "screen -p 0 -S $USERNAME -X eval 'stuff \"stop\"\015'"
		sleep 0.5
		# Waiting for server to shut down
		seconds=0
		while is_running
		do
			sleep 1
			seconds=$seconds+1
			# If shutdown takes longer than 30 seconds, abort
			if [[ $seconds -ge 30 ]]
			then
				logger -t minecraft "$SERVICE failed to halt."
				echo "$SERVICE failed to halt. Aborting."
				exit 1
			fi
			echo "..."
		done
		echo "$SERVICE is shut down."
	else
		echo "$SERVICE was not running."
	fi

	#if is_running
	#then
	#	echo "$SERVICE could not be shut down... still running."
	#else
	#	echo "$SERVICE is shut down."
	#fi
}
mc_log_roll() {
	if [ ! -d $LOGPATH ]; then
		as_user "mkdir -p $LOGPATH"
	fi
        echo "Rolling minecraft server logs"
	path=`datepath $LOGPATH/server_ .log.gz .log`
	as_user "cp $MCPATH/server.log $path && gzip $path"
	# if server.log copy was successful
	if [ $? -eq 0 ]; then
		# Delete log file and create new one
		as_user "cp /dev/null $MCPATH/server.log"
		as_user "echo \"Previous log rolled to $path\" > $MCPATH/server.log "
	else
		echo "Failed to roll log to $LOGPATH/server_$path.log.gz"
	fi
}
mc_whole_backup() {
        echo "Backing up minecraft server folder"
	path=`datepath $WHOLEBACKUP/mine_`
	as_user "cp -r $MCPATH $path"
}
mc_world_backup() {
	TODAY=`date +%F`
	if [ ! -e $BACKUPPATH/$TODAY ]
		then
		as_user "mkdir $BACKUPPATH/$TODAY"
	fi
	echo "Backing up Minecraft world"
	path=`datepath $BACKUPPATH/$TODAY/world_ .tar.bz2 .tar.bz2`
	as_user "tar -hcjf $path $MCPATH/world"
	echo "Backing up Nether world"
	path=`datepath $BACKUPPATH/$TODAY/world_nether_ .tar.bz2 .tar.bz2`
	as_user "tar -hcjf $path $MCPATH/world_nether"
	echo "Backing up The End world"
	path=`datepath $BACKUPPATH/$TODAY/world_the_end_ .tar.bz2 .tar.bz2`
	as_user "tar -hcjf $path $MCPATH/world_the_end"
}
mc_command() {
	command="$1";
	if is_running
	then
		pre_log_len=`wc -l "$MCPATH/server.log" | awk '{print $1}'`
		echo "$SERVICE is running... executing command"
		as_user "screen -p 0 -S minecraft -X eval 'stuff \"$command\"\015'"
		sleep .1 # assumes that the command will run and print to the log file in less than .1 seconds
		# print output
		tail -n $[`wc -l "$MCPATH/server.log" | awk '{print $1}'`-$pre_log_len] "$MCPATH/server.log"
	else
		echo "$SERVICE is not running. Cannot execute command."
	fi
}
to_ram() {
	if is_running
	then
		echo "Cannot copy to ram, $SERVICE is currently running!"
	else
		if [ ! -f "$RAMDISK/world/level.dat" ]
			then
			if [ ! -d "$RAMDISK/world" ]
				then
				as_user "mkdir $RAMDISK/world"
				echo "Created world dir in ramdisk"
			fi
			if [ ! -d "$RAMDISK/world_nether" ]
				then
				as_user "mkdir $RAMDISK/world_nether"
				echo "Created world_nether dir in ramdisk"
			fi
			if [ ! -d "$RAMDISK/world_the_end" ]
				then
				as_user "mkdir $RAMDISK/world_the_end"
				echo "Created world_the_end dir in ramdisk"
			fi
			if [ -L $MCPATH/world ]
				then
				as_user "rsync -rt $WORLDSTORAGE/world/ $RAMDISK/world"
				echo "World copied to ram"
			fi
			if [ -L $MCPATH/world_nether ]
				then
				as_user "rsync -rt $WORLDSTORAGE/world_nether/ $RAMDISK/world_nether"
				echo "Nether copied to ram"
			fi
			if [ -L $MCPATH/world_the_end ]
				then
				as_user "rsync -rt $WORLDSTORAGE/world_the_end/ $RAMDISK/world_the_end"
				echo "The End copied to ram"
			fi
		else
			echo "Ramdisk not empty. Nothing copied to ram. If there are issues, manually erase ramdisk."
		fi
	fi
}
to_disk() {
	if [ "$MCPATH/world/level.dat" -nt "$WORLDSTORAGE/world/level.dat" ]
		then
		as_user "rsync -rt $MCPATH/world/ $WORLDSTORAGE/world"
		echo "World copied to disk"
		as_user "rsync -rt $MCPATH/world_nether/ $WORLDSTORAGE/world_nether"
		echo "Nether copied to disk"
		as_user "rsync -rt $MCPATH/world_the_end/ $WORLDSTORAGE/world_the_end"
		echo "The End copied to disk"
	else
		echo "Ramdisk files older than harddisk files. Nothing copied to harddisk."
	fi
}

mc_update() {
	if is_running
		then
			echo "$SERVICE is running! Will not start update."
	else
		### update minecraft_server.jar
		echo "Updating minecraft_server.jar..."
		MC_SERVER_URL=http://minecraft.net/`wget -q -O - http://www.minecraft.net/download.jsp | grep minecraft_server.jar\</a\> | cut -d \" -f 2`
		as_user "cd $MCPATH && wget -q -O $MCPATH/minecraft_server.jar.update $MC_SERVER_URL"
		if [ -f $MCPATH/minecraft_server.jar.update ]
			then
			if `diff $MCPATH/minecraft_server.jar $MCPATH/minecraft_server.jar.update >/dev/null`
				then
				echo "You are already running the latest version of the Minecraft server."
				as_user "rm $MCPATH/minecraft_server.jar.update"
			else
				as_user "mv $MCPATH/minecraft_server.jar.update $MCPATH/minecraft_server.jar"
				echo "Minecraft successfully updated."
			fi
		else
			echo "Minecraft update could not be downloaded."
		fi

		### update craftbukkit
		echo "Updating craftbukkit...."
		as_user "cd $MCPATH && wget -q -O $MCPATH/craftbukkit.jar.update http://dl.bukkit.org/latest-rb/craftbukkit.jar"
		if [ -f $MCPATH/craftbukkit.jar.update ]
			then
			if `diff $MCPATH/$SERVICE $MCPATH/craftbukkit.jar.update > /dev/null`
				then
				echo "You are already running the latest version of CraftBukkit."
				as_user "rm $MCPATH/craftbukkit.jar.update"
			else
				as_user "mv $MCPATH/craftbukkit.jar.update $MCPATH/$SERVICE"
				echo "CraftBukkit successfully updated."
			fi
		else
			echo "CraftBukkit update could not be downloaded."
		fi
	fi
}


case "$1" in
	start)
		# Starts the server
		if is_running; then
			echo "$SERVICE already running."
		else
			to_ram
			mc_start
		fi
		;;
	stop)
		# Stops the server
		if is_running; then
			as_user "screen -p 0 -S $USERNAME -X eval 'stuff \"say SERVER SHUTTING DOWN!\"\015'"
			mc_stop
			to_disk
		else
			echo "$SERVICE not running."
		fi
		;;
	restart)
		# Restarts the server
		if is_running; then
			as_user "screen -p 0 -S $USERNAME -X eval 'stuff \"say SERVER REBOOT IN 10 SECONDS.\"\015'"
			mc_stop
			mc_start
		else
			echo "$SERVICE not running. Cannot restart."
		fi
		;;
        update)
                #update minecraft_server.jar and craftbukkit.jar
                as_user "screen -p 0 -S $USERNAME -X eval 'stuff \"say SERVER REBOOT/UPDATE IN 10 SECONDS.\"\015'"
                mc_stop
		to_disk
                mc_whole_backup
                mc_update
                mc_start
                ;;
	backup)
		# Backup world
		if is_running; then
			as_user "screen -p 0 -S $USERNAME -X eval 'stuff \"say Backing up world.\"\015'"
			mc_saveoff
			to_disk
			mc_world_backup
			mc_saveon
			as_user "screen -p 0 -S $USERNAME -X eval 'stuff \"say Backup complete.\"\015'"
		else
			mc_world_backup
		fi
		;;
	whole-backup)
		# Backup everything
		if is_running; then
			as_user "screen -p 0 -S $USERNAME -X eval 'stuff \"say COMPLETE SERVER BACKUP COMMENCING. REBOOT IN 10 SECONDS.\"\015'"
			#mc_saveoff
			mc_stop
			to_disk
			mc_whole_backup
			#mc_saveon
			mc_start
		else
			mc_whole_backup
		fi
		;;
	to-disk)
		# Writes from the ramdisk to disk, in case the server crashes.
		mc_saveoff
		to_disk
		mc_saveon
		;;
	connected)
		# Lists connected users
		if is_running; then
			as_user "screen -p 0 -S $USERNAME -X eval 'stuff list\015'"
			sleep 3s
			tac $MCPATH/server.log | grep -m 1 "Connected"
		else
			echo "$SERVICE not running."
		fi
		;;
	last)
		# greps for recently logged in users
		echo Recently logged in users:
		cat $MCPATH/server.log | awk '/entity|conn/ {sub(/lost/,"disconnected");print $1,$2,$4,$5}'
		;;
	console)
		# shows server console with screen
		echo "Press 'Ctrl+A' and then press 'D' to exit the console."
		echo "Hit any key to continue:"
		read
		clear
		as_user "screen -r"
		;;
	say)
		# executes say command on the server console
		if [ $# -gt 1 ]; then
			shift
			mc_command "say $*"
		else
			echo "What do you want to say?"
		fi
		;;
	command)
		# executes a command on the server console
		if [ $# -gt 1 ]; then
			shift
			mc_command "$*"
		else
			echo "Must specify server command (try 'help'?)"
		fi
		;;
	log-roll)
		# Moves and Gzips the logfile, a big log file slows down the
		# server A LOT (what was notch thinking?)
		#as_user "screen -p 0 -S minecraft -X eval 'stuff \"say ROUTINE REBOOT IN 10 SECONDS. BACK IN 30 SECONDS.\"\015'"
		#mc_stop
		#sleep 20s
		mc_log_roll
		#sleep 10s
		#mc_start
		;;
	status)
		# Shows server status
		if is_running; then
			echo "$SERVICE is running."
		else
			echo "$SERVICE is not running."
		fi
		;;
	version)
		#echo Craftbukkit version `awk '/Craftbukkit/ {sub(/\)/, ""); print $12}' $MCPATH/server.log`
		if is_running; then
			as_user "screen -p 0 -S $USERNAME -X eval 'stuff \"version\"\015'"
			tac $MCPATH/server.log | grep -o -m 1 "This server is running.*"
		else
			echo "$SERVICE must be running to check version."
		fi
        	;;
	*)
		echo "Usage: /etc/init.d/minecraft {start|stop|restart|backup|whole-backup|update|to-disk|connected|last|console|say|command|log-roll|status|version}"
		exit 1
		;;
esac

exit 0
